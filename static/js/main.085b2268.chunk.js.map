{"version":3,"sources":["components/user.js","components/users-list.js","actions/addUserAction.js","actions/actionTypes.js","components/user-details.js","App.js","serviceWorker.js","reducers/userReducer.js","index.js"],"names":["User","props","className","user","name","email","phone","to","pathname","_id","state","UsersList","fetchUsers","a","fetch","resp","json","forEach","submitUser","usersSearch","e","setState","searchString","target","value","isLoading","this","users","length","filteredUsers","filter","toLowerCase","includes","usersList","map","key","type","placeholder","onChange","Component","connect","dispatch","addUserAction","UserDetails","location","about","App","path","component","exact","Boolean","window","hostname","match","userReducer","action","Object","assign","myStore","createStore","ReactDOM","render","StrictMode","store","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"gWAuBeA,EApBF,SAACC,GACZ,OACE,wBAAIC,UAAU,QACZ,4BAAKD,EAAME,KAAKC,MAChB,4BAAKH,EAAME,KAAKE,OAChB,4BAAKJ,EAAME,KAAKG,OAChB,4BACE,kBAAC,IAAD,CACEC,GAAI,CACFC,SAAS,SAAD,OAAWP,EAAME,KAAKM,KAC9BC,MAAO,CAAEP,KAAMF,EAAME,QAHzB,kBAMkBF,EAAME,KAAKC,KAN7B,e,gBCJFO,E,kDACJ,WAAYV,GAAQ,IAAD,8BACjB,cAAMA,IAORW,WARmB,sBAQN,4BAAAC,EAAA,sEACQC,MACjB,sIAFS,cACLC,EADK,gBAIeA,EAAKC,OAJpB,cAMCC,SAAQ,SAACd,GACnB,EAAKF,MAAMiB,WAAWf,MAPb,2CARM,EA6BnBgB,YAAc,SAACC,GACb,EAAKC,SAAS,CACZC,aAAcF,EAAEG,OAAOC,SA7BzB,EAAKd,MAAQ,CACXe,WAAW,EACXH,aAAc,IAJC,E,gEAoBe,IAA5BI,KAAKzB,MAAM0B,MAAMC,QACnBF,KAAKd,aAGPc,KAAKL,SAAS,CACZI,WAAW,M,+BAUL,IAAD,OACHI,EACFH,KAAKzB,MAAM0B,OACXD,KAAKzB,MAAM0B,MAAMG,QAAO,SAAC3B,GAAD,OACtBA,EAAKC,KAAK2B,cAAcC,SAAS,EAAKtB,MAAMY,aAAaS,kBAEzDE,EACFJ,GACAA,EAAcK,KAAI,SAAC/B,GAAD,OAAU,kBAAC,EAAD,CAAMgC,IAAKhC,EAAKM,IAAKN,KAAMA,OACzD,OAAOuB,KAAKhB,MAAMe,UAChB,aAEA,yBAAKvB,UAAU,mBACb,yBAAKA,UAAU,oBACb,2BACEkC,KAAK,OACLC,YAAY,oBACZC,SAAUZ,KAAKP,YACfK,MAAOE,KAAKhB,MAAMY,gBAItB,2BAAOpB,UAAU,cACf,+BACE,4BACE,yCACA,qCACA,wCACA,8CAGJ,+BAAQ+B,S,GAnEMM,aAwFTC,eAdS,SAAC9B,GACvB,MAAO,CACLiB,MAAOjB,MAIgB,SAAC+B,GAC1B,MAAO,CACLvB,WAAY,SAACf,GACXsC,ECxFiB,SAACtC,GACtB,MAAO,CACLiC,KCHoB,WDIpBjC,KAAMA,GDqFKuC,CAAsBvC,QAKtBqC,CAA6C7B,GG1E7CgC,EAhBK,SAAC1C,GACnB,IAAME,EAAOF,EAAM2C,SAASlC,MAAMP,KAElC,OACE,yBAAKD,UAAU,gBACb,kBAAC,IAAD,CAAMK,GAAG,gBAAT,iBACA,4BAAKJ,EAAKC,MACV,2BACE,2CADF,IAC4BD,EAAK0C,OAEjC,uCAAa1C,EAAKG,OAClB,2BAAIH,EAAKE,SCEAyC,MAXf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAM,CAAC,IAAK,gBAAiBC,UAAWrC,EAAWsC,OAAK,IAC/D,kBAAC,IAAD,CAAOF,KAAK,YAAYC,UAAWL,OCCvBO,QACW,cAA7BC,OAAOP,SAASQ,UAEe,UAA7BD,OAAOP,SAASQ,UAEhBD,OAAOP,SAASQ,SAASC,MACvB,2D,mBCTSC,EATK,WAAyB,IAAxB5C,EAAuB,uDAAf,GAAI6C,EAAW,uCAC1C,OAAQA,EAAOnB,MACb,IAAK,WACH,MAAM,GAAN,mBAAW1B,GAAX,CAAkB8C,OAAOC,OAAO,GAAIF,EAAOpD,QAC7C,QACE,OAAOO,ICKPgD,EAAUC,YAAYL,GAE5BM,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,IAAD,CAAUC,MAAOL,GACf,kBAAC,EAAD,QAGJM,SAASC,eAAe,SFiHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.085b2268.chunk.js","sourcesContent":["import React from \"react\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst User = (props) => {\r\n  return (\r\n    <tr className=\"user\">\r\n      <td>{props.user.name}</td>\r\n      <td>{props.user.email}</td>\r\n      <td>{props.user.phone}</td>\r\n      <td>\r\n        <Link\r\n          to={{\r\n            pathname: `/user/${props.user._id}`,\r\n            state: { user: props.user },\r\n          }}\r\n        >\r\n          Click here for {props.user.name} details\r\n        </Link>\r\n      </td>\r\n    </tr>\r\n  );\r\n};\r\n\r\nexport default User;\r\n","import React, { Component } from \"react\";\r\nimport User from \"./user\";\r\nimport \"./users.css\";\r\nimport { connect } from \"react-redux\";\r\nimport * as addUserAction from \"../actions/addUserAction\";\r\n\r\nclass UsersList extends Component {\r\n  constructor(props) {\r\n    super(props);\r\n    this.state = {\r\n      isLoading: true,\r\n      searchString: \"\",\r\n    };\r\n  }\r\n\r\n  fetchUsers = async () => {\r\n    const resp = await fetch(\r\n      \"https://gist.githubusercontent.com/swazza/619e53db7be4498b689cba176cab2fbf/raw/03929aa6f594818284604592353c6dd776487b0d/users.json\"\r\n    );\r\n    const userRecords = await resp.json();\r\n\r\n    userRecords.forEach((user) => {\r\n      this.props.submitUser(user);\r\n    });\r\n  };\r\n\r\n  componentDidMount() {\r\n    if (this.props.users.length === 0) {\r\n      this.fetchUsers();\r\n    }\r\n\r\n    this.setState({\r\n      isLoading: false,\r\n    });\r\n  }\r\n\r\n  usersSearch = (e) => {\r\n    this.setState({\r\n      searchString: e.target.value,\r\n    });\r\n  };\r\n\r\n  render() {\r\n    let filteredUsers =\r\n      this.props.users &&\r\n      this.props.users.filter((user) =>\r\n        user.name.toLowerCase().includes(this.state.searchString.toLowerCase())\r\n      );\r\n    let usersList =\r\n      filteredUsers &&\r\n      filteredUsers.map((user) => <User key={user._id} user={user} />);\r\n    return this.state.isLoading ? (\r\n      \"loading...\"\r\n    ) : (\r\n      <div className=\"users-container\">\r\n        <div className=\"search-container\">\r\n          <input\r\n            type=\"text\"\r\n            placeholder=\"Search users here\"\r\n            onChange={this.usersSearch}\r\n            value={this.state.searchString}\r\n          />\r\n        </div>\r\n\r\n        <table className=\"users-list\">\r\n          <thead>\r\n            <tr>\r\n              <th>User name</th>\r\n              <th>Email</th>\r\n              <th>Phone no</th>\r\n              <th>User Details</th>\r\n            </tr>\r\n          </thead>\r\n          <tbody>{usersList}</tbody>\r\n        </table>\r\n      </div>\r\n    );\r\n  }\r\n}\r\n\r\nconst mapStateToProps = (state) => {\r\n  return {\r\n    users: state,\r\n  };\r\n};\r\n\r\nconst mapDispatchToProps = (dispatch) => {\r\n  return {\r\n    submitUser: (user) => {\r\n      dispatch(addUserAction.addUser(user));\r\n    },\r\n  };\r\n};\r\n\r\nexport default connect(mapStateToProps, mapDispatchToProps)(UsersList);\r\n","import * as actionTypes from \"./actionTypes\";\r\nexport const addUser = (user) => {\r\n  return {\r\n    type: actionTypes.ADD_USER,\r\n    user: user,\r\n  };\r\n};\r\n","export const ADD_USER = \"ADD_USER\";\r\n","import React from \"react\";\r\nimport \"./users.css\";\r\nimport { Link } from \"react-router-dom\";\r\n\r\nconst UserDetails = (props) => {\r\n  const user = props.location.state.user;\r\n\r\n  return (\r\n    <div className=\"user-details\">\r\n      <Link to=\"/users-list/\">Back to users</Link>\r\n      <h1>{user.name}</h1>\r\n      <p>\r\n        <strong>About: </strong> {user.about}\r\n      </p>\r\n      <p>Contact: {user.phone}</p>\r\n      <p>{user.email}</p>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default UserDetails;\r\n","import React from \"react\";\nimport { BrowserRouter as Router, Route, Switch } from \"react-router-dom\";\nimport \"./App.css\";\nimport UsersList from \"./components/users-list\";\nimport UserDetails from \"./components/user-details\";\n\nfunction App() {\n  return (\n    <Router>\n      <Switch>\n        <Route path={[\"/\", \"/users-list/\"]} component={UsersList} exact />\n        <Route path=\"/user/:id\" component={UserDetails} />\n      </Switch>\n    </Router>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","const userReducer = (state = [], action) => {\r\n  switch (action.type) {\r\n    case \"ADD_USER\":\r\n      return [...state, Object.assign({}, action.user)];\r\n    default:\r\n      return state;\r\n  }\r\n};\r\n\r\nexport default userReducer;\r\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nimport { Provider } from \"react-redux\";\nimport { createStore } from \"redux\";\nimport userReducer from \"./reducers/userReducer\";\n\nconst myStore = createStore(userReducer);\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={myStore}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}